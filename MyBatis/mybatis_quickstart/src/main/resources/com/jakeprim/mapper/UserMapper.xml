<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 需要和UserMapper接口的全限定名相同 -->
<mapper namespace="com.jakeprim.mapper.UserMapper">


    <!-- 根据id查询用户 -->
    <!-- statement的id要和UserMapper接口的方法名相同 -->
    <select id="findUserById" parameterType="int" resultMap="userResultMap">
        select *
        from user
        where id = #{id}
    </select>

    <!-- ResultMap 封装实体类
        可以给多个查询配置引用的
        resultMap 手动配置实体属性与表中字段的映射关系 来完成手动封装
            id: 标签的唯一标识
            type: 封装后的实体类型 （在核心配置文件中配置了别名 可直接写user）
    -->
    <resultMap id="userResultMap" type="user">
        <!-- 手动配置映射关系 -->
        <!-- id 用来配置主键
                property:对应实体类的属性名
                column:对应数据表的字段名
        -->
        <id property="id" column="id"></id>

        <!--
            result:对表中普通字段封装
                property:对应实体类的属性名
                column:对应数据表的字段名
         -->
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <result property="birthday" column="birthday"></result>
    </resultMap>
    <select id="findAllResultMap" resultMap="userResultMap">
        select *
        from user
    </select>

    <!-- 多条件查询 方式1 arg0-argn   param1-paramn -->
    <!--    <select id="findUserByIdAndUserName" resultMap="userResultMap">-->
    <!--        select *-->
    <!--        from user-->
    <!--        where id = #{arg0}-->
    <!--          and username = #{arg1}-->
    <!--    </select>-->
    <select id="findUserByIdAndUserName" resultMap="userResultMap">
        select *
        from user
        where id = #{param1}
          and username = #{param2}
    </select>

    <!-- 多条件查询 方式2 @Param 设置的value值 -->
    <select id="findUserByIdAndUserName2" resultMap="userResultMap">
        select *
        from user
        where id = #{id}
          and username = #{username}
    </select>

    <!-- 多条件查询 方式3 通过POJO对象进行条件查询和查询条件和实体的getter中的首字母小写 属性名保持一致-->
    <select id="findUserByIdAndUserName3" resultMap="userResultMap" parameterType="user">
        select *
        from user
        where id = #{id}
          and username = #{username}
    </select>

    <!-- 模糊查询：方式一
        #{} 在mybatis中是一个占位符，在引用参数值的时候，会自动的添加单引号
        实际参数的转换时候会自动的添加 单引号
    -->
    <select id="findUserByUserName1" resultMap="userResultMap" parameterType="string">
        select *
        from user
        where username like #{username}
    </select>

    <!-- 模糊查询：方式二
    不推荐使用${} 会导致SQL注入 -->
    <select id="findUserByUserName2" resultMap="userResultMap" parameterType="string">
        select *
        from user
        <!-- ${} 当parameterType是基本数据类型或只有一个参数时，${}里面的值只能写value 写其他的会报错
            select *         from user                  where username like %jake%
            ${} 是SQL原样拼接 不会自动添加单引号
        -->
        where username like '${value}'
    </select>


    <!-- 添加用户，获取主键方式一
        useGeneratedKeys: 声明返回主键
        keyProperty: 把返回主键的值，封装到实体中的哪个属性上
    -->
    <insert id="saveUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        insert into user (username, birthday, sex, address)
        VALUES (#{usernameabc}, #{birthdayabc}, #{sexabc}, #{addressabc})
    </insert>

    <!--
        添加用户，获取主键方式二：
     -->
    <insert id="saveUser1" parameterType="user">
        <!--
            selectKey 使用范围更广，支持所有类型的数据库
                order:after 表示selectKey的SQL语句，要在insert语句之后执行
                        before 表示在insert语句之前执行
                      keyColumn: 表示指定主键对应的数据库的字段名
                      keyProperty: 表示parameterType实体类的属性名
                      resultType ：指定主键类型
        -->
        <selectKey order="AFTER" keyColumn="id" keyProperty="id" resultType="int">
            <!-- 获取最后一次插入的主键id值 -->
            select last_insert_id()
        </selectKey>
        insert into user (username, birthday, sex, address)
        VALUES (#{usernameabc}, #{birthdayabc}, #{sexabc}, #{addressabc})
    </insert>

    <!-- 动态SQL - if 多条件查询 -->
    <select id="findUserByIdAndUserNameIf" parameterType="user" resultType="com.jakeprim.domain.User">
        select *
        from user
        # where 1 = 1
        <!-- where 相当于1=1 当时如果没有条件的话，不会拼接where关键字 同时会去掉第一个and关键字-->
        <where>
            <!--
                test: 表达式
                注意如果id是int基本类型，那么id的默认值为0. 一般int类型推荐使用Integer包装类型，默认为null
            -->
            <if test="id!=null">
                and id = #{id}
            </if>
            <if test="username!=null">
                and username = #{username}
            </if>
        </where>

    </select>

    <!-- 动态SQL - 动态更新 -->
    <update id="updateSet" parameterType="user">
        update user
        <!-- <set>:在更新的时候，会自动添加set关键字，并且会去掉最后一个逗号 -->
        <set>
            <if test="username!=null">
                username = #{username},
            </if>
            <if test="sex!=null">
                sex = #{sex},
            </if>
            <if test="birthday!=null">
                birthday = #{birthday},
            </if>
            <if test="address!=null">
                address = #{address},
            </if>
        </set>
        where id = #{id}
    </update>


    <!-- 动态SQL foreach标签 多值查询：根据多个id查询用户 -->
    <select id="findByList" parameterType="list" resultType="user">
        <include refid="selectUser"/>
        <where>
            <!--
                collection:代表要遍历的集合元素，通常写collection或list
                open:代表语句的开始部分
                close:代表语句的结束部分
                item:代表遍历集合中的每个元素，生成的变量名
                separator:代表分隔符号
             -->
            <foreach collection="collection" open="id in (" close=")" item="id" separator=",">
                #{id}
            </foreach>
        </where>
    </select>

    <!-- SQL片段抽取 -->
    <sql id="selectUser">
        select *
        from user
    </sql>

    <select id="findByArray" resultType="user" parameterType="int">
        <!-- include 根据id引入SQL片段 -->
        <include refid="selectUser"/>
        <where>
            <!-- collection:如果传入的参数是一个数组，要写成array -->
            <foreach collection="array" open="id in (" close=")" item="id" separator=",">
                #{id}
            </foreach>
        </where>
    </select>

    <resultMap id="userMap" type="user">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <result property="birthday" column="birthday"/>
        <!-- 一个用户对应着多个订单，使用集合标签<collection>
            property:属性名
            ofType:
         -->
        <collection property="ordersList" ofType="com.jakeprim.domain.Orders">
            <id property="id" column="oid"/>
            <result property="ordertime" column="ordertime"/>
            <result property="total" column="total"/>
            <result property="uid" column="uid"/>
        </collection>
    </resultMap>

    <!-- 多表关联查询：一对多关系 -->
    <select id="findAllWithOrders" resultMap="userMap">
        select u.*, o.id oid, o.ordertime, o.total, o.uid
        from orders o
                 right join user u on u.id = o.uid
    </select>

    <resultMap id="userRoleMap" type="user">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <result property="birthday" column="birthday"/>
        <collection property="roleList" ofType="com.jakeprim.domain.Role">
            <id property="id" column="sid"/>
            <result property="rolename" column="rolename"/>
            <result property="roleDesc" column="roleDesc"/>
        </collection>
    </resultMap>
    <select id="findAllWithRoles" resultMap="userRoleMap">
        select u.*, sr.id sid, sr.rolename, sr.roleDesc
        from user u
                 left join sys_user_role sur on u.id = sur.roleid
                 left join sys_role sr on sr.id = sur.userid
    </select>

    <!-- 开启二级缓存 -->
    <cache> </cache>

    <!--
        useCache="true":表示当前的statement要使用二级缓存
        如果要禁用二级缓存 设置为false即可
    -->
    <select id="findById" parameterType="int" resultType="user" useCache="true">
        select *
        from user
        where id = #{id}
    </select>


    <!-- 一对多嵌套查询 开启懒加载 -->
    <resultMap id="userOrderMap" type="user">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <result property="birthday" column="birthday"/>
        <!--
            fetchType:
                lazy:延迟加载策略
                eager:立即加载策略
        -->
        <collection property="ordersList" ofType="com.jakeprim.domain.Orders"
                    select="com.jakeprim.mapper.OrderMapper.findById"
                    column="id">

        </collection>
    </resultMap>
    <select id="findAllWithOrders2" resultMap="userOrderMap">
        select *
        from user
    </select>


    <!-- 多对多嵌套查询 -->
    <resultMap id="userRolesMap2" type="user">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <result property="birthday" column="birthday"/>
        <collection property="roleList" ofType="com.jakeprim.domain.Role"
                    select="com.jakeprim.mapper.RoleMapper.findByUid"
                    column="id">

        </collection>
    </resultMap>
    <select id="findAllWithRoles2" resultMap="userRolesMap2">
        select *
        from user
    </select>
</mapper>